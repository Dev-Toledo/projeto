lib/
├── database/
│   └── db.dart                # Arquivo que gerencia a conexão com o banco de dados
├── models/
│   ├── item.dart              # Modelo de item (Item do pedido ou do cardápio)
│   ├── pedido.dart            # Modelo de pedido
│   ├── usuario.dart           # Modelo de usuário
├── repositories/
│   ├── usuarios_repository.dart  # Repositório que gerencia os usuários
│   ├── pedidos_repository.dart   # Repositório que gerencia os pedidos
│   └── itens_repository.dart     # Repositório que gerencia os itens de pedidos
├── screens/
│   ├── login_screen.dart       # Tela de login
│   ├── pedidos_screen.dart     # Tela que lista pedidos
│   └── detalhes_pedido_screen.dart # Tela que mostra detalhes de um pedido


Explicação:
Singleton: O banco de dados é gerenciado por meio de uma classe Singleton (DB), garantindo que só haja uma conexão ativa com o banco de dados ao longo do ciclo de vida da aplicação.

Métodos:

database: O getter é responsável por garantir que o banco de dados seja inicializado apenas uma vez.
_initDatabase: Método que define o caminho do banco de dados e o inicializa.
_onCreate: Método que cria as tabelas usuarios, pedidos e itens_pedido na primeira inicialização do banco de dados.
Tabelas:

usuarios: Armazena os usuários do sistema, com colunas como id, nome, email, senha, e tipo (por exemplo, "admin" ou "cliente").
pedidos: Armazena os pedidos feitos pelos usuários, vinculados por meio de usuario_id.
itens_pedido: Armazena os itens que fazem parte de cada pedido, vinculados por meio de pedido_id.
Próximos Passos:
Migrações: Se houver a necessidade de alterar a estrutura do banco de dados no futuro, você pode adicionar o método onUpgrade para gerenciar migrações.
Integração com o App: Agora, você pode usar essa conexão para acessar e manipular dados dentro das classes repositories que você está desenvolvendo.