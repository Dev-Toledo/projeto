Sugestão para a validação de e-mail:

validator: (value) {
  if (value == null || value.isEmpty) {
    return 'Informe seu e-mail';
  } else if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
    return 'Informe um e-mail válido';
  }
  return null;
},


Sugestão para a validação de senha:

dart
Copiar código
validator: (value) {
  if (value == null || value.isEmpty) {
    return 'Informe sua senha';
  } else if (value.length < 6) {
    return 'A senha deve ter pelo menos 6 caracteres';
  }
  return null;
},


Checkbox Lembre de mim:

O widget Checkbox está usando WidgetStateProperty, que não é uma classe nativa do Flutter. Você pode simplificar o preenchimento da cor do Checkbox com a propriedade fillColor.
Aqui está a correção para o Checkbox:

Checkbox(
  value: _rememberMe,
  onChanged: (bool? value) {
    setState(() {
      _rememberMe = value!;
    });
  },
  activeColor: Colors.blue,  // Cor quando o checkbox está marcado
  checkColor: Colors.white,  // Cor da marca de seleção
),


Botão de Login:

O botão de login atualmente apenas verifica a validação dos campos. Você pode implementar a lógica de autenticação (validar e-mail e senha com os dados do usuário no sistema).
Exemplo de lógica para o botão de login:

onPressed: () {
  if (formKey.currentState!.validate()) {
    // Adicione a lógica de login aqui
    print('Login realizado com sucesso!');
  }
},


Botão de Cadastro:

Você pode redirecionar o usuário para a tela de cadastro ao pressionar o botão "Cadastrar". Use o Navigator para navegar entre as telas.

Exemplo:

onPressed: () {
  Navigator.pushNamed(context, '/cadastro');
},


Melhorias feitas:

Validação do e-mail e senha: Removi a validação de número para o campo de e-mail e senha e adicionei uma validação mais apropriada.

Correção do Checkbox: Removi a lógica incorreta e simplifiquei a implementação do Checkbox.

Lógica para o botão de login: Adicionei um print para demonstrar onde você pode implementar a lógica de autenticação.

Redirecionamento para a tela de cadastro: O botão "Cadastrar" agora redireciona para a tela de cadastro usando o Navigator.

Alterações e Explicações:

Login de Administrador:

O login do administrador pode ser feito inserindo o nome de usuário "admin" e a senha "123456". Se essa combinação for detectada, o login será considerado válido.
Se o usuário inserir um e-mail válido, a verificação segue o fluxo normal com a validação do e-mail e senha.
Botão para Acessar Itens Sem Login:

Um botão pequeno foi adicionado com o texto "Ver Itens sem Login" no final da tela de login. Ao clicar nele, o usuário é redirecionado para a tela de visualização dos itens sem a necessidade de fazer login.
Você pode alterar a rota 'itens' para a rota específica que exibe os itens.
Redirecionamento com Navigator.pushNamed:

O Navigator.pushNamed(context, '/itens') é usado para redirecionar o usuário para a tela de visualização de itens.
Certifique-se de que a rota 'itens' está registrada no arquivo de rotas do seu projeto.
Como Gerenciar Rotas:
Certifique-se de registrar as rotas no seu arquivo principal do Flutter (main.dart), algo assim:

void main() {
  runApp(MaterialApp(
    initialRoute: '/login',
    routes: {
      '/login': (context) => LoginView(),
      '/itens': (context) => ItensView(), // Tela para visualizar itens
      '/cadastro': (context) => CadastroView(), // Tela de cadastro
    },
  ));
}
Essa implementação permitirá que o usuário visualize os itens diretamente ou realize o login com a credencial "admin".